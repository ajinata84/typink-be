generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Vote {
  voteId              Int                 @id @default(autoincrement()) @db.UnsignedInt
  userId              String              @db.Char(36)
  voteType            Int                 @db.UnsignedInt
  chapterId           Int?                @db.UnsignedInt
  literatureId        Int?                @db.UnsignedInt
  chapterCommentId    Int?                @db.UnsignedInt
  literatureCommentId Int?                @db.UnsignedInt
  forumId             Int?                @db.UnsignedInt
  forumCommentId      Int?                @db.UnsignedInt
  created_at          DateTime            @default(now()) @db.Timestamp(0)
  chapterComments     chapterComments?    @relation(fields: [chapterCommentId], references: [chapterCommentId], onDelete: Cascade)
  chapters            chapters?           @relation(fields: [chapterId], references: [chapterId], onDelete: Cascade)
  forumComments       forumComments?      @relation(fields: [forumCommentId], references: [forumCommentId], onDelete: Cascade)
  forum               forum?              @relation(fields: [forumId], references: [forumId], onDelete: Cascade)
  literatureComments  literatureComments? @relation(fields: [literatureCommentId], references: [literatureCommentId], onDelete: Cascade)
  literature          literature?         @relation(fields: [literatureId], references: [literatureId], onDelete: Cascade)
  users               users               @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "userIndex")
  @@index([chapterId], map: "chapterIndex")
  @@index([literatureId], map: "literatureIndex")
  @@index([chapterCommentId], map: "chapterCommentIndex")
  @@index([literatureCommentId], map: "literatureCommentIndex")
  @@index([forumId], map: "forumIndex")
  @@index([forumCommentId], map: "forumCommentIndex")
}

model chapterComments {
  chapterCommentId Int      @id @default(autoincrement()) @db.UnsignedInt
  created_at       DateTime @default(now()) @db.Timestamp(0)
  chapterId        Int      @db.UnsignedInt
  userId           String   @db.Char(36)
  content          String   @db.Text
  voteCount        Int      @default(0)
  Vote             Vote[]
  users            users    @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "chapterCommenterRelation")
  chapters         chapters @relation(fields: [chapterId], references: [chapterId], onDelete: NoAction, onUpdate: NoAction, map: "chapterParentRelation")

  @@index([chapterId], map: "chapterIndex")
  @@index([userId], map: "userIndex")
}

model chapters {
  chapterId       Int               @id @default(autoincrement()) @db.UnsignedInt
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  literatureId    Int               @db.UnsignedInt
  chapterTitle    String            @db.VarChar(255)
  chapterNumber   Int
  imageUrl        String            @db.Text
  content         String            @db.Text
  voteCount       Int               @default(0)
  Vote            Vote[]
  chapterComments chapterComments[]
  literature      literature        @relation(fields: [literatureId], references: [literatureId], onDelete: NoAction, onUpdate: NoAction, map: "literatureParentRelation")

  @@index([literatureId], map: "literatureIndex")
}

model donation {
  donationId                       Int      @id @default(autoincrement()) @db.UnsignedInt
  created_at                       DateTime @default(now()) @db.Timestamp(0)
  senderId                         String   @db.Char(36)
  receiverId                       String   @db.Char(36)
  amount                           Int
  users_donation_receiverIdTousers users    @relation("donation_receiverIdTousers", fields: [receiverId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "receiverRelation")
  users_donation_senderIdTousers   users    @relation("donation_senderIdTousers", fields: [senderId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "senderRelation")

  @@index([receiverId], map: "receiverIndex")
  @@index([senderId], map: "senderIndex")
}

model forum {
  forumId       Int             @id @default(autoincrement()) @db.UnsignedInt
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  userId        String          @db.Char(36)
  title         String          @db.VarChar(255)
  content       String          @db.Text
  genreId       Int             @db.UnsignedInt
  forumType     String          @db.VarChar(50)
  voteCount     Int             @default(0)
  Vote          Vote[]
  genre         genre           @relation(fields: [genreId], references: [genreId], onDelete: NoAction, onUpdate: NoAction, map: "forumGenreRelation")
  users         users           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "originalPosterRelation")
  forumComments forumComments[]

  @@index([genreId], map: "genreIndex")
  @@index([userId], map: "userIndex")
}

model forumComments {
  forumCommentId Int      @id @default(autoincrement()) @db.UnsignedInt
  created_at     DateTime @default(now()) @db.Timestamp(0)
  forumId        Int      @db.UnsignedInt
  userId         String   @db.Char(36)
  content        String   @db.Text
  voteCount      Int      @default(0)
  Vote           Vote[]
  users          users    @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "commenterRelation")
  forum          forum    @relation(fields: [forumId], references: [forumId], onDelete: NoAction, onUpdate: NoAction, map: "forumParentRelation")

  @@index([forumId], map: "forumIndex")
  @@index([userId], map: "userIndex")
}

model genre {
  genreId    Int          @id @default(autoincrement()) @db.UnsignedInt
  created_at DateTime     @default(now()) @db.Timestamp(0)
  genreTitle String?      @db.VarChar(255)
  forum      forum[]
  literature literature[]
}

model literature {
  literatureId       Int                  @id @default(autoincrement()) @db.UnsignedInt
  created_at         DateTime             @default(now()) @db.Timestamp(0)
  authorId           String               @db.Char(36)
  title              String               @db.VarChar(255)
  synopsis           String               @db.Text
  imageUrl           String               @db.Text
  genreId            Int                  @db.UnsignedInt
  language           String               @db.VarChar(255)
  copyright          Int
  voteCount          Int                  @default(0)
  Vote               Vote[]
  chapters           chapters[]
  collections        collections[]
  users              users                @relation(fields: [authorId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "authorRelation")
  genre              genre                @relation(fields: [genreId], references: [genreId], onDelete: NoAction, onUpdate: NoAction, map: "genreRelation")
  literatureComments literatureComments[]

  @@index([authorId], map: "authorIndex")
  @@index([genreId], map: "genreIndex")
}

model literatureComments {
  literatureCommentId Int        @id @default(autoincrement()) @db.UnsignedInt
  created_at          DateTime   @default(now()) @db.Timestamp(0)
  userId              String     @db.Char(36)
  literatureId        Int        @db.UnsignedInt
  content             String     @db.Text
  voteCount           Int        @default(0)
  Vote                Vote[]
  literature          literature @relation(fields: [literatureId], references: [literatureId], onDelete: NoAction, onUpdate: NoAction, map: "literatureRelation")
  users               users      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "userRelation")

  @@index([literatureId], map: "literatureIndex")
  @@index([userId], map: "userIndex")
}

model collections {
  collectionId String     @id @default(uuid())
  created_at   DateTime   @default(now()) @db.Timestamp(0)
  userId       String     @db.Char(36)
  literatureId Int        @db.UnsignedInt
  literature   literature @relation(fields: [literatureId], references: [literatureId], onDelete: Cascade)
  users        users      @relation("UserCollections", fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "userIndex")
  @@index([literatureId], map: "literatureIndex")
}

model transactions {
  transactionId   Int      @id @default(autoincrement()) @db.UnsignedInt
  userId          String   @db.Char(36)
  beforeBalance   Float
  afterBalance    Float
  transactionType String   @db.VarChar(50)
  created_at      DateTime @default(now()) @db.Timestamp(0)
  users           users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "userIndex")
}

model admin {
  adminId    Int      @id @default(autoincrement()) @db.UnsignedInt
  username   String   @db.VarChar(50)
  password   String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
}

model users {
  userId                              String               @id @default(uuid())
  created_at                          DateTime             @default(now()) @db.Timestamp(0)
  username                            String               @db.VarChar(20)
  email                               String               @unique @db.VarChar(255)
  password                            String               @db.VarChar(255)
  bio                                 String?              @db.Text
  balance                             Float                @default(0)
  Vote                                Vote[]
  chapterComments                     chapterComments[]
  collections                         collections[]        @relation("UserCollections")
  donation_donation_receiverIdTousers donation[]           @relation("donation_receiverIdTousers")
  donation_donation_senderIdTousers   donation[]           @relation("donation_senderIdTousers")
  forum                               forum[]
  forumComments                       forumComments[]
  literature                          literature[]
  literatureComments                  literatureComments[]
  transactions                        transactions[]
}
